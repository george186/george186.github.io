<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一周学习报告</title>
      <link href="note/undefined-undefined.html"/>
      <url>note/undefined-undefined.html</url>
      
        <content type="html"><![CDATA[<p>本周学习可以说是一路艰辛  </p><h2 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h2><p>搭建博客使用hexo+github好处多多—-<strong>前提是不报错</strong><br>分享一个搭建博客教学链接<br><a href="">https://www.simon96.online/2018/10/12/hexo-tutorial/</a><br>网上一般都有有报错解决办法，但是有的还是要靠自己摸索<br>下面分享一个我遇到的最坑问题<br>当所有过程都没问题后却发现自己网上博客一片空白（本地博客）没有问题，提供以下解决办法<br><a href="https://imgchr.com/i/D607F0"><img src="https://s3.ax1x.com/2020/11/28/D607F0.md.png" alt="D607F0.md.png"></a><br>将GitHub page路径改成master，因为我上传的文件路径都是master，但是它默认的路径是main，所以出现没有报错但是网上博客一片空白的情况。<br>这个坑卡了我好几天，甚至还删了充搭了一次。。。。。。  </p><h2 id="上传文章"><a href="#上传文章" class="headerlink" title="上传文章"></a>上传文章</h2><p>这个出问题自求多福不是玄学问题吧，实在不行换主题。（说多都是泪）  </p><hr><h2 id="web学习笔记"><a href="#web学习笔记" class="headerlink" title="web学习笔记"></a>web学习笔记</h2><h3 id="命令执行函数和eval-函数"><a href="#命令执行函数和eval-函数" class="headerlink" title="命令执行函数和eval()函数"></a>命令执行函数和eval()函数</h3><p>eval()函数能将输入的字符串当作PHP代码来执行，这就很容易造成漏洞，下面是本周做的题目中的一个例子  </p><blockquote><p>eval($_GET[‘a’]);</p></blockquote><p>很明显，这串代码相当于一个后门，只要你用get传参传入一串可执行的PHP代码就可以执行这串代码，注意结尾要加“；”。<br>命令执行函数常见的有以下几种<br>1、system<br>string system(string command,int &amp;return_var)</p><p>可以用来执行系统命令并将相应的执行结果输出</p><p>2、exec<br>string exec(string command,array &amp;outpub,int &amp;return_var)</p><p>command是要执行的命令，output是获得执行命令输出的每一行字符串，return_var存放执行命令后的状态值。</p><p>注意：exec输出的是命令执行结果的最后一行内容。如果你需要获取未经处理的全部输出数据，请使用passthru()函数。</p><p>如果想要获取命令的输出内容，请确保使用output参数。</p><p>3、passthru<br>void passthru(string command, int &amp;return_var)</p><p>command是要执行的命令，return_var存放执行命令后的状态值。</p><p>4、 shell_exec<br>string shell_exec(string command)</p><p>command是要执行的命令<br>我现在比较了解的就是system()函数，可以用的命令有很多这些命令和Linux里的命令相似  </p><blockquote><p>cat 一次显示整个文件  </p><p>tac 是将cat反过来写，所以他的功能和cat相反，cat是由第一行到最后一行连续显示在萤幕上，而 tac 则是由最后一行到第一行反向在萤幕上显示出来。</p><p>more  会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页<br>显示，而且还有搜寻字串的功能 。但是在网页上好像不能翻页。 </p><p>less  与 more 类似，但使用 less 可以随意浏览文件使用[pageup] [pagedown] 等按键，而 more 仅能向后移动，却不能向前移动，而且 less 在查看之前不会加载整个文件。同样网页端好像不能翻页。</p></blockquote><p>介绍完eval()和命令执行函数后可以感觉到我们可以使用这一漏洞来查看，修改web服务器里的文件。所以在题目中我构造  </p><blockquote><p>/?a=system(‘ls’);<br>和  </p><blockquote><p>/?a=system(‘tac f111a9.php’);</p></blockquote></blockquote><p>便可以读出其中文件内容。  </p><h3 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h3><p>eval()虽然好用，但是遇上正则函数便失去作用，正则函数会过滤掉一些字符串，比如cat，tac等，这样就没有办法像一般那样直接传入函数命令，所以要绕过正则函数来上传。这里附上别人的总结<br><a href="https://blog.csdn.net/mochu7777777/article/details/104631142/">关于PHP正则匹配后代码执行的一些绕过方法</a><br>其中可以采取异或绕过，取反绕过，换行符绕过，利用正则回溯次数限制的绕过<br>这里介绍目前我能理解的两种绕过<br><strong>换行符绕过</strong><br>preg_match()函数只能匹配一行字符串，所以使用换行符%0a就可以绕过它的匹配<br><strong>url编码取反绕过</strong><br>这是取反绕过中最简单的一种绕过，该方法只适用于PHP7<br>对于想要传入的参数，先进行url编码再取反<br>例如传入构造一个phpinfo()；<br>只需要将phpinfo取反编码就行<br>如果需要执行有参数的函数，比如system(“ls”);<br>需要分别对system和ls进行取反，分别得到  </p><blockquote><p>%8C%86%8C%8B%9A%92 </p><p>%93%8C</p></blockquote><p>构建payload/?(<del>%8C%86%8C%8B%9A%92)(</del>%93%8C)；就可以绕过正则函数<br>其他的异或绕过和取反绕过以及利用回溯次数绕过需要用到脚本，等我变强了再来讨论吧hhhhh  </p><h3 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h3><p>附上学习的链接<br><a href="https://blog.csdn.net/qq_41381461/article/details/90047616">php变量覆盖</a><br>先总结我目前遇到的两种<br><strong>extract()函数变量覆盖</strong><br><a href="https://www.runoob.com/php/func-array-extract.html">菜鸟教程关于extract的讲解</a><br>总的来说extract()函数在默认情况下，会将传入的变量的值覆盖原有的变量的值，如以下代码<br>&lt;?php  </p><blockquote><p>$id=1;<br>extract($_GET);<br>echo $id;<br>?&gt;<br>//提交：?id=123<br>//结果： 123</p></blockquote><p>所以可以将原本不知道的变量的值进行覆盖，使其成为我们传入的值，对于  </p><blockquote><p>if($liwu==$flag) {<br>        echo’flag{xxxxxxxxxxx}’;</p></blockquote><p>这类代码漏洞十分有用。<br>**$$导致的变量覆盖问题**<br>在PHP中$$表示的是一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。如以下代码<br>&lt;?php  </p><blockquote><p>$c=’hello’;<br>$$c=’world’;<br>echo $c;<br>echo $$c;<br>?&gt;</p></blockquote><p>得到的结果是helloworld，也就是说将$c作为一个变量名进行赋值，从而覆盖了原来的$c=hello。<br>而使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。因此就产生了变量覆盖漏洞。<br>&lt;?php  </p><blockquote><p>$id=5;<br>foreach ($_GET as $key =&gt; $value) {<br>$$key = $value;<br>}<br>echo $a;<br>?&gt;</p></blockquote><p>如果如果get传的是?id=1，那么，经过$$key=$value之后，就会变成$id=1，覆盖掉原来的$id=5。<br>如果代码如下<br>&lt;?php  </p><blockquote><p>$id=5;<br>foreach ($_GET as $key =&gt; $value) {<br>$$key = $$value;<br>}<br>echo $a;<br>?&gt;  </p></blockquote><p>那么如果get传入的是?id=flag,经过$$key = $$value之后就会变成$id=$flag，此时$flag里面的值，也就是flag已经被写入$id当中了。以上两组代码结合起来便可以实现  </p><blockquote><p>$_POST[“flag”] == $flag</p></blockquote><p>这样的要求<br>关于foreach()细节以后再另写笔记说。（因为写到这已经是凌晨一点半了。。。。。）  </p>]]></content>
      
      
      <categories>
          
          <category> note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web第一周练习</title>
      <link href="test/undefined-undefined.html"/>
      <url>test/undefined-undefined.html</url>
      
        <content type="html"><![CDATA[<p>  第一周的web一共做了四道题，现在写下做题思路，以便日后回顾。<br>#一，basic rec<br>打开题目地址，得到如下代码。<br><img src="https://s3.ax1x.com/2020/11/28/D6NtTf.md.png" alt="D6NtTf.md.png"><br>真正有用的函数只有一个</p><blockquote><p>eval($_GET[‘a’]);</p></blockquote><p>于是立刻学习关于eval函数的相关用法和知识<br>这是从菜鸟教程上得知的eval()函数的用法  </p><blockquote><p>eval() 函数把字符串按照 PHP 代码来计算。<br>该字符串必须是合法的 PHP 代码，且必须以分号结尾。</p></blockquote><p>所以可以看成这个网页已经被上传了一个木马，只要我们以get请求方式上传以下形式的字符到变量a，就能将被上传的字符串按照PHP代码来执行  </p><blockquote><p>/?a=”一串PHP代码”；（结尾要有分号才能执行该代码）</p></blockquote><p>但是该上传什么样的PHP代码呢，因为我要找到flag，所以要查看该网页服务器下有flag的文件，所以选用执行系统命令函数，该函数有以下几种system()passthru()exec()shell_exec()popen()proc_open()<br>pcntl_exec()，我选用的是system()函数<br>system()函数执行有回显，会将结果输出到页面上  </p><blockquote><p>string system ( string $command [, int &amp;$return_var ])</p></blockquote><p>$command是执行的命令，[]里的可选可不选，可以执行的命令与Linux中相似，有ls，cat，tac，more，less，等其中ls是显示文件目录，cat，tac等都是查看文件内容的命令，首先我查看文件目录，于是输入以下命令  </p><blockquote><p>/?a=system(‘ls’);</p></blockquote><p>得到文件目录<br><a href="https://imgchr.com/i/D6NrXn"><img src="https://s3.ax1x.com/2020/11/28/D6NrXn.md.png" alt="D6NrXn.md.png"></a><br>知道flag在f111a9.php中，接着便读取出该文件内容  </p><blockquote><p>/?a=system(‘tac f111a9.php’);</p></blockquote><p>得到flag。<br><a href="https://imgchr.com/i/D6NRtU"><img src="https://s3.ax1x.com/2020/11/28/D6NRtU.md.png" alt="D6NRtU.md.png"></a><br>#二，PHP变量覆盖<br>打开题目地址得到如下代码<br><a href="https://imgchr.com/i/D6Nhp4"><img src="https://s3.ax1x.com/2020/11/28/D6Nhp4.md.png" alt="D6Nhp4.md.png"></a>  </p><p>这道题目的重点是extrace()函数<br>extrace()将从数组中将变量导入到当前符号表，默认的是如果变量冲突，则覆盖已有的变量<br>知道这个函数后再对代码进行审计  </p><blockquote><p>$flag=’xxxxxxxx’;<br>extract($_GET); //以get传参的值会进过extract()函数<br>if(isset($liwu)) { //判断是否设立了$liwu该变量<br>    $content=trim(file_get_contents($flag)); //读取$flag的变量并将它赋给$content变量<br>    if($liwu==$content) {<br>        echo’flag{xxxxxxxxxxx}’; //如果$liwu和$content这两个变量相等就输出flag<br>    }<br>    else {<br>        echo ‘please try other operation.’;<br>    }<br>}  </p></blockquote><p>因为我不知道flag是什么，所以正常情况下不可能使$content这个变量等于$flag来得到真正的flag，所以我使用extrace()函数当传参时将$flag原来的值覆盖，这样就可以让这两个变量相等，从而得到flag。于是构造以下形式  </p><blockquote><p>/?$liwu=&amp;$flag=</p></blockquote><p>这样我们将$flag=空的值覆盖了原来的flag的值，从而使$liwu=$flag得到真正的flag。<br><a href="https://imgchr.com/i/D6NIXR"><img src="https://s3.ax1x.com/2020/11/28/D6NIXR.md.png" alt="D6NIXR.md.png"></a><br>但是不知道为什么构造/?$liwu=123&amp;$flag=123这样的不行。<br>#三，basic rce2<br>代码如下<br><a href="https://imgchr.com/i/D6Uk4S"><img src="https://s3.ax1x.com/2020/11/28/D6Uk4S.md.png" alt="D6Uk4S.md.png"></a><br>这道题目和第一题本质差别不大，都是要用到执行系统命令函数，但是可以看出多了一个preg_match()函数。这是一个正则表达式函数，这个函数可以匹配查字符串中的所要搜索的字符，从题目函数可以看出，他规定了以下字符串<br>more，less，flag，head，nl，tail，tac，cat，rm，cp，mv，*，{<br>也就是说，如果我get传参的字符串中有这些字符串就会被返回，也就是不能执行所传代码，所以说不能像第一题那样直接输入/?Rem=system(‘cat xxxx’);来查看文件，但是还是可以来查看文件目录的，（没规定ls这个字符）<br><a href="https://imgchr.com/i/D6Unun"><img src="https://s3.ax1x.com/2020/11/28/D6Unun.md.png" alt="D6Unun.md.png"></a><br>得到有flag的文件。<br>下一步便是如何绕过这个匹配，这里我选择了取反绕过（换行绕过没成功，应该是掌握的有点问题）也就是将命令 ‘cat flag index.php’取反后再进行url编码再构造/?Rem=system(~xxxxxxxxx);即可绕过关于cat flag的匹配。<br>‘cat flag index.php’取反编码如下  </p><blockquote><p>%27%9C%9E%8B%DF%99%93%9E%98%DF%96%91%9B%9A%87%D1%8F%97%8F%27</p></blockquote><p>构造payload后传参便得到flag<br><a href="https://imgchr.com/i/D6UuBq"><img src="https://s3.ax1x.com/2020/11/28/D6UuBq.md.png" alt="D6UuBq.md.png"></a><br>#四，PHP变量覆盖2<br>代码如下<br><a href="https://imgchr.com/i/D6UG34"><img src="https://s3.ax1x.com/2020/11/28/D6UG34.md.png" alt="D6UG34.md.png"></a><br>这次函数变成了foreach()同时多了一个$$这样的字符，而$$是这道题目的关键。<br>$$abc表示对$abc这个变量进行赋值，<br>而使用foreach来遍历数组中的值，然后再将获取到的数组键名作为变量，数组中的键值作为变量的值。<br>所以这道题要利用这两个foreach函数来使上传的参数flag等于$flag，进而得到flag。<br>通过代码最后一行可以知道我们要将$flag里的值赋予$_200最后才能输出flag。于是利用第一个foreach函数来构造paylod  </p><blockquote><p>/?_200=flag</p></blockquote><p>这样的结果是$$_200=$$flag,也就是将原来$_200的值覆盖成$flag里的值，也就是真正的flag。<br>接着使用第二个foreach函数来构造payload使我post传过去的flag=$flag,进而打印出$_200,于是构造以下payload  </p><blockquote><p>flag=aaaaaaaaa</p></blockquote><p>这样的结果是$$flag=aaaaaaaaa，也就是将原来$flag里的值覆盖成aaaaaaaaa，这样我们上传的参数flag一定等于$flag，而真正的flag已经被赋予$_200,最后打印出真正的flag。<br><a href="https://imgchr.com/i/D6UaHx"><img src="https://s3.ax1x.com/2020/11/28/D6UaHx.md.png" alt="D6UaHx.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web习题练习1</title>
      <link href="%E7%BB%83%E4%B9%A0/undefined-undefined.html"/>
      <url>%E7%BB%83%E4%B9%A0/undefined-undefined.html</url>
      
        <content type="html"><![CDATA[<p>我的第一篇博客</p>]]></content>
      
      
      
        <tags>
            
            <tag> 练习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
